<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="2" failed="2" ignored="0" total="6" passed="2">
  <reporter-output>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => bsuite]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => bsuite]]>
    </line>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => btest]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => btest]]>
    </line>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => setUp]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => setUp]]>
    </line>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => bmethod]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => bmethod]]>
    </line>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => testMethod2]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => testMethod2]]>
    </line>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => amethod]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => amethod]]>
    </line>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => bmethod]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => bmethod]]>
    </line>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => testMethod1]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => testMethod1]]>
    </line>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => amethod]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => amethod]]>
    </line>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => cleanUp]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => cleanUp]]>
    </line>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => atest]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => atest]]>
    </line>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => btest]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => btest]]>
    </line>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => setUp]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => setUp]]>
    </line>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => bmethod]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => bmethod]]>
    </line>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => testMethod2]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => testMethod2]]>
    </line>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => amethod]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => amethod]]>
    </line>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => bmethod]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => bmethod]]>
    </line>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => testMethod1]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => testMethod1]]>
    </line>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => amethod]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => amethod]]>
    </line>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => cleanUp]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => cleanUp]]>
    </line>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => atest]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => atest]]>
    </line>
    <line>
      <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => asuite]]>
    </line>
    <line>
      <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => asuite]]>
    </line>
  </reporter-output>
  <suite name="Listeners TestSuite" duration-ms="467" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
    <groups>
    </groups>
    <test name="Application Test" duration-ms="140" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
      <class name="testngdemo.TestngListenerDemo">
        <test-method status="PASS" signature="btest()[pri:0, instance:testngdemo.TestngListenerDemo@1565ec2]" name="btest" is-config="true" duration-ms="1" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <reporter-output>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => btest]]>
            </line>
          </reporter-output>
        </test-method> <!-- btest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:testngdemo.TestngListenerDemo@1565ec2]" name="setUp" is-config="true" duration-ms="1" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <reporter-output>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => setUp]]>
            </line>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="bmethod()[pri:0, instance:testngdemo.TestngListenerDemo@1565ec2]" name="bmethod" is-config="true" duration-ms="1" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <reporter-output>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => bmethod]]>
            </line>
          </reporter-output>
        </test-method> <!-- bmethod -->
        <test-method status="FAIL" signature="testMethod2()[pri:0, instance:testngdemo.TestngListenerDemo@1565ec2]" name="testMethod2" duration-ms="22" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at testngdemo.TestngListenerDemo.testMethod2(TestngListenerDemo.java:78)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => testMethod2]]>
            </line>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => testMethod2]]>
            </line>
            <line>
              <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => amethod]]>
            </line>
          </reporter-output>
        </test-method> <!-- testMethod2 -->
        <test-method status="PASS" signature="amethod()[pri:0, instance:testngdemo.TestngListenerDemo@1565ec2]" name="amethod" is-config="true" duration-ms="1" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <reporter-output>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => amethod]]>
            </line>
          </reporter-output>
        </test-method> <!-- amethod -->
        <test-method status="PASS" signature="bmethod()[pri:0, instance:testngdemo.TestngListenerDemo@1565ec2]" name="bmethod" is-config="true" duration-ms="1" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <reporter-output>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => bmethod]]>
            </line>
          </reporter-output>
        </test-method> <!-- bmethod -->
        <test-method status="PASS" signature="testMethod1()[pri:0, instance:testngdemo.TestngListenerDemo@1565ec2]" name="testMethod1" duration-ms="5" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <reporter-output>
            <line>
              <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => testMethod1]]>
            </line>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => testMethod1]]>
            </line>
            <line>
              <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => amethod]]>
            </line>
          </reporter-output>
        </test-method> <!-- testMethod1 -->
        <test-method status="PASS" signature="amethod()[pri:0, instance:testngdemo.TestngListenerDemo@1565ec2]" name="amethod" is-config="true" duration-ms="1" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <reporter-output>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => amethod]]>
            </line>
          </reporter-output>
        </test-method> <!-- amethod -->
        <test-method status="SKIP" signature="testMethod3()[pri:0, instance:testngdemo.TestngListenerDemo@1565ec2]" name="testMethod3" duration-ms="0" started-at="2019-01-04T19:37:57Z" depends-on-methods="testngdemo.TestngListenerDemo.testMethod2" finished-at="2019-01-04T19:37:57Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method TestngListenerDemo.testMethod3()[pri:0, instance:testngdemo.TestngListenerDemo@1565ec2] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method TestngListenerDemo.testMethod3()[pri:0, instance:testngdemo.TestngListenerDemo@1565ec2] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => cleanUp]]>
            </line>
          </reporter-output>
        </test-method> <!-- testMethod3 -->
        <test-method status="PASS" signature="cleanUp()[pri:0, instance:testngdemo.TestngListenerDemo@1565ec2]" name="cleanUp" is-config="true" duration-ms="1" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <reporter-output>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => cleanUp]]>
            </line>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method status="PASS" signature="atest()[pri:0, instance:testngdemo.TestngListenerDemo@1565ec2]" name="atest" is-config="true" duration-ms="1" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <reporter-output>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => atest]]>
            </line>
          </reporter-output>
        </test-method> <!-- atest -->
      </class> <!-- testngdemo.TestngListenerDemo -->
    </test> <!-- Application Test -->
    <test name="Application Test 1" duration-ms="66" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
      <class name="testngdemo.TestngListenerDemo">
        <test-method status="PASS" signature="bsuite()[pri:0, instance:testngdemo.TestngListenerDemo@d80b78]" name="bsuite" is-config="true" duration-ms="51" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <reporter-output>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => bsuite]]>
            </line>
          </reporter-output>
        </test-method> <!-- bsuite -->
        <test-method status="PASS" signature="btest()[pri:0, instance:testngdemo.TestngListenerDemo@d80b78]" name="btest" is-config="true" duration-ms="1" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <reporter-output>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => btest]]>
            </line>
          </reporter-output>
        </test-method> <!-- btest -->
        <test-method status="PASS" signature="setUp()[pri:0, instance:testngdemo.TestngListenerDemo@d80b78]" name="setUp" is-config="true" duration-ms="1" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <reporter-output>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => setUp]]>
            </line>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="bmethod()[pri:0, instance:testngdemo.TestngListenerDemo@d80b78]" name="bmethod" is-config="true" duration-ms="2" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <reporter-output>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => bmethod]]>
            </line>
          </reporter-output>
        </test-method> <!-- bmethod -->
        <test-method status="FAIL" signature="testMethod2()[pri:0, instance:testngdemo.TestngListenerDemo@d80b78]" name="testMethod2" duration-ms="3" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at org.testng.Assert.assertTrue(Assert.java:54)
at testngdemo.TestngListenerDemo.testMethod2(TestngListenerDemo.java:78)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => testMethod2]]>
            </line>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => testMethod2]]>
            </line>
            <line>
              <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => amethod]]>
            </line>
          </reporter-output>
        </test-method> <!-- testMethod2 -->
        <test-method status="PASS" signature="amethod()[pri:0, instance:testngdemo.TestngListenerDemo@d80b78]" name="amethod" is-config="true" duration-ms="2" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <reporter-output>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => amethod]]>
            </line>
          </reporter-output>
        </test-method> <!-- amethod -->
        <test-method status="PASS" signature="bmethod()[pri:0, instance:testngdemo.TestngListenerDemo@d80b78]" name="bmethod" is-config="true" duration-ms="1" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <reporter-output>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => bmethod]]>
            </line>
          </reporter-output>
        </test-method> <!-- bmethod -->
        <test-method status="PASS" signature="testMethod1()[pri:0, instance:testngdemo.TestngListenerDemo@d80b78]" name="testMethod1" duration-ms="10" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <reporter-output>
            <line>
              <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => testMethod1]]>
            </line>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => testMethod1]]>
            </line>
            <line>
              <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => amethod]]>
            </line>
          </reporter-output>
        </test-method> <!-- testMethod1 -->
        <test-method status="PASS" signature="amethod()[pri:0, instance:testngdemo.TestngListenerDemo@d80b78]" name="amethod" is-config="true" duration-ms="4" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <reporter-output>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => amethod]]>
            </line>
          </reporter-output>
        </test-method> <!-- amethod -->
        <test-method status="SKIP" signature="testMethod3()[pri:0, instance:testngdemo.TestngListenerDemo@d80b78]" name="testMethod3" duration-ms="0" started-at="2019-01-04T19:37:57Z" depends-on-methods="testngdemo.TestngListenerDemo.testMethod2" finished-at="2019-01-04T19:37:57Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method TestngListenerDemo.testMethod3()[pri:0, instance:testngdemo.TestngListenerDemo@d80b78] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method TestngListenerDemo.testMethod3()[pri:0, instance:testngdemo.TestngListenerDemo@d80b78] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[beforeInvocation: testngdemo.TestngListenerDemo => cleanUp]]>
            </line>
          </reporter-output>
        </test-method> <!-- testMethod3 -->
        <test-method status="PASS" signature="cleanUp()[pri:0, instance:testngdemo.TestngListenerDemo@d80b78]" name="cleanUp" is-config="true" duration-ms="1" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <reporter-output>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => cleanUp]]>
            </line>
          </reporter-output>
        </test-method> <!-- cleanUp -->
        <test-method status="PASS" signature="atest()[pri:0, instance:testngdemo.TestngListenerDemo@d80b78]" name="atest" is-config="true" duration-ms="1" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <reporter-output>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => atest]]>
            </line>
          </reporter-output>
        </test-method> <!-- atest -->
        <test-method status="PASS" signature="asuite()[pri:0, instance:testngdemo.TestngListenerDemo@d80b78]" name="asuite" is-config="true" duration-ms="1" started-at="2019-01-04T19:37:57Z" finished-at="2019-01-04T19:37:57Z">
          <reporter-output>
            <line>
              <![CDATA[AfterInvocation: testngdemo.TestngListenerDemo => asuite]]>
            </line>
          </reporter-output>
        </test-method> <!-- asuite -->
      </class> <!-- testngdemo.TestngListenerDemo -->
    </test> <!-- Application Test 1 -->
  </suite> <!-- Listeners TestSuite -->
</testng-results>
